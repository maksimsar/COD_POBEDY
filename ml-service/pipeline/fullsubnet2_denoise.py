# pipeline/fullsubnet2_denoise.py
import sys
import logging
from pathlib import Path
import torch

def denoise_fullsubnet(
    wav_in: Path,
    wav_out: Path,
    device: str = "cpu",
) -> None:
    repo_dir = Path(__file__).parent / "fullsubnet_plus"
    out_dir = wav_out.parent
    out_dir.mkdir(parents=True, exist_ok=True)

    logging.info(f"üîà FullSubNet2: –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ {repo_dir}, device={device}")
    # –ü–µ—Ä–µ–¥–∞—ë–º input_wav –∏ output_dir –ø—Ä—è–º–æ –≤ hub.load
    pipeline = torch.hub.load(
        repo_or_dir=str(repo_dir),
        model="FullSubNet2",
        source="local",
        device=device,
        input_wav=str(wav_in),
        output_dir=str(out_dir),
    )

    # –ü–æ–¥–º–µ–Ω—è–µ–º sys.exit, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–µ exit() –Ω–µ —É–±–∏–ª–∏ Uvicorn
    orig_exit = sys.exit
    sys.exit = lambda code=0: logging.warning(f"Ignored sys.exit({code}) from FullSubNet2")

    try:
        logging.info("üöÄ FullSubNet2: –∑–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞‚Ä¶")
        # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —è–≤–Ω—ã–π run ‚Äì –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
        if hasattr(pipeline, "run"):
            pipeline.run()
        else:
            # –∏–Ω–∞—á–µ ‚Äì –≤—ã–∑—ã–≤–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç, –æ–Ω –≤–Ω—É—Ç—Ä–∏ hubconf –∑–∞–ø—É—Å—Ç–∏—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
            pipeline()
    except SystemExit as se:
        logging.info(f"Caught SystemExit({se.code}) from FullSubNet2, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ FullSubNet2")
        raise RuntimeError("FullSubNet2 –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–Ω–∞—Ç—å") from None
    finally:
        sys.exit = orig_exit

    # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    candidate = out_dir / wav_in.name
    if candidate.exists():
        candidate.replace(wav_out)
        logging.info(f"‚úÖ FullSubNet2: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ {wav_out}")
        return

    # Fallback: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π .wav
    wavs = [p for p in out_dir.glob("*.wav") if p.name != wav_in.name]
    if not wavs:
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω .wav –≤ {out_dir}")
    wavs[0].replace(wav_out)
    logging.info(f"‚úÖ FullSubNet2 (fallback): —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ {wav_out}")