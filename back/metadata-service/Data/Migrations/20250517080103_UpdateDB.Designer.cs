// <auto-generated />
using System;
using MetadataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetadataService.Migrations
{
    [DbContext(typeof(MetadataContext))]
    [Migration("20250517080103_UpdateDB")]
    partial class UpdateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetadataService.Data.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages");
                });

            modelBuilder.Entity("MetadataService.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<short?>("BirthYear")
                        .HasColumnType("smallint")
                        .HasColumnName("birth_year");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("DeathYear")
                        .HasColumnType("smallint")
                        .HasColumnName("death_year");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_songs_title");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.SongAuthor", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("SongId", "AuthorId", "Role");

                    b.HasIndex("AuthorId");

                    b.ToTable("song_authors", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.SongTag", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("SongId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("song_tags", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_tags_name");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.Transcript", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("CheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checked_at");

                    b.Property<Guid?>("CheckedById")
                        .HasColumnType("uuid")
                        .HasColumnName("checked_by_id");

                    b.Property<decimal?>("Confidence")
                        .HasColumnType("numeric")
                        .HasColumnName("confidence");

                    b.Property<long>("EndMs")
                        .HasColumnType("bigint")
                        .HasColumnName("end_ms");

                    b.Property<long>("SegmentIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("segment_index");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<long>("StartMs")
                        .HasColumnType("bigint")
                        .HasColumnName("start_ms");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("SongId", "SegmentIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_transcripts_song_segment");

                    b.ToTable("transcripts", (string)null);
                });

            modelBuilder.Entity("MetadataService.Models.SongAuthor", b =>
                {
                    b.HasOne("MetadataService.Models.Author", "Author")
                        .WithMany("SongAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetadataService.Models.Song", "Song")
                        .WithMany("SongAuthors")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MetadataService.Models.SongTag", b =>
                {
                    b.HasOne("MetadataService.Models.Song", "Song")
                        .WithMany("SongTags")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetadataService.Models.Tag", "Tag")
                        .WithMany("SongTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MetadataService.Models.Transcript", b =>
                {
                    b.HasOne("MetadataService.Models.Song", "Song")
                        .WithMany("Transcripts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MetadataService.Models.Author", b =>
                {
                    b.Navigation("SongAuthors");
                });

            modelBuilder.Entity("MetadataService.Models.Song", b =>
                {
                    b.Navigation("SongAuthors");

                    b.Navigation("SongTags");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("MetadataService.Models.Tag", b =>
                {
                    b.Navigation("SongTags");
                });
#pragma warning restore 612, 618
        }
    }
}
